#!/usr/bin/env python3
"""
Regenerate .github/context_digest.json by hashing the key markdown files.
Run from repository root: python .github/tools/regenerate_context_digest.py
"""
import hashlib
import json
from pathlib import Path

ROOT = Path(__file__).resolve().parents[2]
FILES = [
    Path(ROOT / '.github' / 'copilot-instructions.md'),
    Path(ROOT / 'default_agents.md'),
    Path(ROOT / '.github' / 'AGENT_RULES.md'),
    Path(ROOT / '.github' / 'copilot-diretrizes' / 'glossario.md'),
]

def sha256_of(path: Path) -> str:
    h = hashlib.sha256()
    with path.open('rb') as f:
        for chunk in iter(lambda: f.read(8192), b''):
            h.update(chunk)
    return h.hexdigest().upper()

def main():
    digest = {
        "generated_at": "",
        "version": "",
        "schema_version": "1.0.0",
        "sources": [],
        "deprecated": [],
        "notes": "Regenerated by script",
        "tooling": {
            "regenerate_script": str(Path(__file__).as_posix(),),
            "preload_prompt": ".github/preload_prompt.md"
        }
    }
    from datetime import datetime
    digest['generated_at'] = datetime.utcnow().isoformat() + 'Z'
    digest['version'] = datetime.utcnow().strftime('%Y.%m.%d-%H%M')

    for p in FILES:
        digest['sources'].append({
            'path': str(p.relative_to(ROOT).as_posix()),
            'role': 'core' if 'copilot-instructions' in p.name else 'manifesto' if 'default_agents' in p.name else 'documentation' if 'AGENT_RULES' in p.name else 'annex',
            'hash': sha256_of(p),
            'summary': ''
        })

    out = Path(ROOT / '.github' / 'context_digest.json')
    out.write_text(json.dumps(digest, indent=2, ensure_ascii=False))
    print('Wrote', out)

if __name__ == '__main__':
    main()
